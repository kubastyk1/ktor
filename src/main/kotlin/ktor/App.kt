/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ktor

import freemarker.cache.ClassTemplateLoader
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.features.CallLogging
import io.ktor.features.ContentNegotiation
import io.ktor.freemarker.FreeMarker
import io.ktor.freemarker.FreeMarkerContent
import io.ktor.http.Parameters
import io.ktor.request.receiveParameters
import io.ktor.response.respond
import io.ktor.routing.get
import io.ktor.routing.post
import io.ktor.routing.route
import io.ktor.routing.routing
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import ktor.dao.DAOFacadeDatabase
import org.jetbrains.exposed.sql.Database

fun main(args: Array<String>) {
    val dao = DAOFacadeDatabase(Database.connect("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1", driver = "org.h2.Driver"))

    embeddedServer(Netty, port = 8080){
        dao.init()
        install(FreeMarker){
            templateLoader = ClassTemplateLoader(this::class.java.classLoader, "templates")
        }
        routing {
            route("/"){
                get{
                    call.respond(FreeMarkerContent("index.ftl", mapOf("users" to dao.getAllUsers())))
                }
            }
            route("/user"){
                get {
                    val action = (call.request.queryParameters["action"] ?: "new")
                    when(action){
                        "new" -> call.respond(FreeMarkerContent("user.ftl",
                                mapOf("action" to action)))
                        "edit" -> {
                            val id = call.request.queryParameters["id"]
                            if(id != null){
                                call.respond(FreeMarkerContent("user.ftl",
                                        mapOf("user" to dao.getUser(id.toInt()),
                                                "action" to action)))
                            }
                        }
                    }
                }
                post{
                    val postParameters: Parameters = call.receiveParameters()
                    val action = postParameters["action"] ?: "new"
                    when(action){
                        "new" -> dao.createUser(postParameters["login"] ?: "", postParameters["email"] ?: "", postParameters["password"] ?: "")
                        "edit" ->{
                            val id = postParameters["id"]
                            if(id != null)
                                dao.updateUser(id.toInt(), postParameters["login"] ?: "", postParameters["email"] ?: "", postParameters["password"] ?: "")
                        }
                    }
                    call.respond(FreeMarkerContent("index.ftl", mapOf("users" to dao.getAllUsers())))
                }
            }
            route("/delete"){
                get{
                    val id = call.request.queryParameters["id"]
                    if(id != null){
                        dao.deleteUser(id.toInt())
                        call.respond(FreeMarkerContent("index.ftl", mapOf("users" to dao.getAllUsers())))
                    }
                }
            }
        }
    }.start(wait = true)
}
